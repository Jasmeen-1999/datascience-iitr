

Q: Create a condition on x1, x2 and x where print True if x is on the line joining x1 and x2
   def is_online(x1, x2, x):
    if x1 <= x2 and x >= x1 and x <= x2:
        return True
    elif x2 <= x1 and x >= x2 and x <= x1:
        return True
    else: 
        return False

Q: Two lines x1 --> x2 and x3 --> x4, print True, if overlapping or touching otherwise print False
ans: def are_overlapping(x1, x2, x3, x4):
    # Write your logic
    return True or False
Ans:def are_overlapping(x1, x2, x3, x4):
        mx1 = max(x1,x2)
        mn1 = min(x1,x2)
        mx2 = max(x3,x4)
        mn2 = min(x3,x4)
        line1 = list(range(mn1,mx1+1))
        line2 = list(range(mn2,mx2+1))
        new_list = []
        for element in line1:
            if element in line2:
                new_list.append(element)
        print(new_list)
        if new_list == []:
            return False
        else:
            return True
 Q: Write SQ method, Write you own code to do SQRT
Q: First write you own method to cube and then do cube root
# Q: Tower of Hanoi
Q:

A rectangle is represented by two opposite corners. Each corner is represented a two number (x, y). Given two rectangles, return True if they are touching or overlapping otherwise return false.

def is_overlapping(fx1,fy1,fx2,fy2,sx1,sy1,sx2,sy2):
    return True

#Q:Calculate hypotenus of right angled triangle 
def hypotenuse(b,h):
    d = (b*b) + (h*h)
    diagonal  = d ** 0.5
    return diagonal

 
#Q: Calculate distance between two points using hypotenuse
   def distance_2d(x1, y1, x2, y2):
    x = x2 - x1
    y = y2 - y1
    dist = hypotenuse(x,y)
    return dist

# Q:

def distance_3d(x1, y1, z1, x2, y2, z2):
    return #the distance using hypotenus
#Q: discuss distance between two point in N dimensions
